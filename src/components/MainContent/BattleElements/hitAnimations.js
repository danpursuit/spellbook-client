import allMoves from '../../../constants/allMoves.json';
import mechanics from '../../../constants/mechanics.json';
import gashRed from '../../../images/projectile/gashRed.png';
import gashGray from '../../../images/projectile/gashGray.png';
import pillage from '../../../images/projectile/pillage.png';
import boom from '../../../images/projectile/boom.png';
import shadowBlastExplosion from '../../../images/projectile/shadowBlastExplosion.png';
import shadowEye from '../../../images/icons/shadow/eye.png';
import { createGlyph } from './playerAnimations';
import { keyframes } from "@emotion/react";

// hitAnimations are generated by a player when their *opponent* casts a move
// similar to playerAnimations otherwise

const allMovesDict = {};
allMoves.cast.forEach((move) => {
    allMovesDict[move.fullName] = move;
});
allMoves.equip.forEach((move) => {
    allMovesDict[move.fullName] = move;
});

const fade = (projSize) => keyframes`
    0% {
        transform: scale(0.8);
        opacity: 1;
    }
    100% {
        transform: scale(1);
        opacity: 0;
    }
`;

// for slash
const fadeSlash = (projSize) => keyframes`
    0% {
        transform: scale(0.8) scaleX(-1) rotate(20deg);
        opacity: 1;
    }
    100% {
        transform: scale(1) scaleX(-1) rotate(20deg);
        opacity: 0;
    }
`;

const getHitAnimation = ({ moveName, castTime }, playerBox, enemyBox) => {
    const x = enemyBox.x - playerBox.x;
    const y = enemyBox.y - playerBox.y;
    const move = allMovesDict[moveName];

    let projSize, animationLength, animationStartup, leakTime;
    let sprite;
    if (move.tags[mechanics.effectType.equip]) {
        return {}
    } else if (move.tags[mechanics.effectType.physicalDamage]) {
        if (move.tags[mechanics.effectType.stealGold]) {
            projSize = 186;
            animationLength = 600;
            animationStartup = castTime;
            sprite = pillage;
            return {
                animation: null,
                animationLength,
                animationStartup,
                projectiles: [
                    {
                        style: {
                            animation: `${fade(projSize)} ${animationLength}ms ease-in-out forwards`,
                            backgroundSize: 'contain',
                            backgroundPosition: 'center',
                            height: `${projSize}px`,
                            width: `${projSize}px`,
                            backgroundImage: `url(${sprite})`,
                            top: `calc(50% - ${projSize / 2}px)`,
                            left: `calc(50% - ${projSize / 2}px)`,
                        },
                        animationLength,
                        animationStartup,
                    }
                ]
            }
        } else if (move.tags[mechanics.weaponType.slash]) {
            projSize = 180;
            animationLength = 600;
            animationStartup = castTime;
            sprite = move.tags[mechanics.alignment.fire] ? gashRed : gashGray;
            return {
                animation: null,
                animationLength,
                animationStartup,
                projectiles: [
                    {
                        style: {
                            animation: `${fadeSlash(projSize)} ${animationLength}ms ease-in-out forwards`,
                            backgroundSize: 'contain',
                            backgroundPosition: 'center',
                            height: `${projSize}px`,
                            width: `${projSize}px`,
                            backgroundImage: `url(${sprite})`,
                            top: `calc(50% - ${projSize / 2}px)`,
                            left: `calc(50% - ${projSize / 2}px)`,
                        },
                        animationLength,
                        animationStartup,
                    }
                ]
            }
        } else {
            projSize = 360;
            animationLength = 600;
            animationStartup = castTime;
            return {
                animation: null,
                animationLength,
                animationStartup,
                projectiles: [
                    {
                        style: {
                            animation: `${fade(projSize)} ${animationLength}ms ease-in-out forwards`,
                            backgroundSize: 'contain',
                            backgroundPosition: 'center',
                            height: `${projSize}px`,
                            width: `${projSize}px`,
                            backgroundImage: `url(${boom})`,
                            top: `calc(50% - ${projSize / 2}px)`,
                            left: `calc(50% - ${projSize / 2}px)`,
                        },
                        animationLength,
                        animationStartup,
                    }
                ]
            }
        }
    } else if (move.tags[mechanics.effectType.magicalDamage]) {
        if (move.name === 'prayerBlast') {
            projSize = 320;
            animationLength = 600;
            animationStartup = castTime;
            return {
                animation: null,
                animationLength,
                animationStartup,
                projectiles: [
                    {
                        style: {
                            animation: `${fade(projSize)} ${animationLength}ms ease-in-out forwards`,
                            backgroundSize: 'contain',
                            backgroundPosition: 'center',
                            height: `${projSize}px`,
                            width: `${projSize}px`,
                            backgroundImage: `url(${shadowBlastExplosion})`,
                            top: `calc(50% - ${projSize / 2}px)`,
                            left: `calc(50% - ${projSize / 2}px)`,
                        },
                        animationLength,
                        animationStartup,
                    }
                ]
            }
        }
        return {}
    } else {
        if (move.name === 'corruptedPossessions') {
            return {
                projectiles: [createGlyph(shadowEye, castTime)]
            }
        }
    }
    return {}
}

export default getHitAnimation;